{"version":3,"sources":["assets/images/sb_logo.svg","assets/images/default.jpg","assets/sounds/tada.mp3","assets/sounds/no.mp3","utils.js","components/header/question-list/index.js","components/header/index.js","components/player/index.js","components/question-block/index.js","components/variants-block/index.js","components/details/index.js","components/button/index.js","containers/game-blocks/index.js","components/confetti/index.js","containers/finish-blocks/index.js","App.js","index.js"],"names":["module","exports","getCorrectAnswerId","min","max","Math","floor","random","React","memo","currentGroupId","className","map","group","id","key","score","src","logo","alt","Player","forwardRef","ref","hidden","style","display","autoPlay","autoPlayAfterSrcChange","showJumpControls","customAdditionalControls","QuestionBlock","props","handleStopPlayer","isRoundGuessed","playerRef","current","audio","pause","createRef","this","correctAnswerId","groupData","correctAnswerAudio","data","isCorrectAnswer","Number","isInteger","Jumbotron","Image","image","img","rounded","ListGroup","Item","filmName","PureComponent","VariantsBlock","ostData","indicatorClasses","click","onClick","autoplay","isAnswerChosen","Card","trackName","description","disabled","children","type","join","ostGroups","chosenAnswerId","sound","handleChooseOst","handleGoNextLevel","Row","Col","sm","md","c","Array","fill","_","i","cl","maxRoundScore","handleStartNewGame","maxScore","length","role","aria-label","App","soundRef","state","chosenVariants","isAnswerCorrect","updatedClasses","setState","updatedState","concat","indexOf","stateDependOnAnswer","getCorrectAnswerState","getIncorrectAnswerState","play","groupName","triesCount","correctAudio","correctAnswers","incorrectAudio","resetedSettings","getResetedSettings","renderGameBlocks","renderFinishGameBlocks","console","log","Object","keys","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9531f7ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sb_logo.4f82cd73.svg\";","module.exports = __webpack_public_path__ + \"static/media/default.6d7ad918.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tada.1768de81.mp3\";","module.exports = __webpack_public_path__ + \"static/media/no.e05e70d4.mp3\";","export const getCorrectAnswerId = (min = 0, max = 5) => (\n  Math.floor(Math.random() * (max - min + 1)) + min\n);\n","import React from 'react';\nimport './question-list.scss';\n\nconst QuestionList = ({currentGroupId}) => {\n  return (\n    <ul className=\"navigation d-flex\">\n      {[\"Разминка\", \"Иностранные\", \"Сериалы\", \"Мультфильмы\", \"Игры\", \"Советские\"]\n        .map((group, id) => (\n          <li \n            key={id}\n            className={id === currentGroupId ? \"active\" : \"\"}>\n            {group}\n          </li>\n        ))}\n    </ul>\n  );\n}\n \nexport default React.memo(QuestionList);\n","import React from 'react';\nimport './header.scss';\nimport logo from '../../assets/images/sb_logo.svg';\nimport QuestionList from './question-list';\n\nconst Header = ({ score, currentGroupId }) => {\n  return (\n    <header className=\"header d-flex\">\n      <div className=\"top-panel\">\n        <div className=\"logo\">\n          <img src={logo} alt=\"Songbird Logo\" />\n        </div>\n        <h5>Счет: {score}</h5>\n      </div>\n      <QuestionList currentGroupId={currentGroupId} />\n    </header>\n  );\n}\n \nexport default React.memo(Header);","import React from 'react';\nimport AudioPlayer from 'react-h5-audio-player';\nimport 'react-h5-audio-player/lib/styles.css';\nimport './player.scss';\n\nconst Player = React.forwardRef(({ src, hidden = false }, ref) => (\n  <AudioPlayer\n    ref={ref}\n    style={hidden ? {display: \"none\"} : {}}\n    src={src}\n    autoPlay={false}\n    autoPlayAfterSrcChange={false}\n    showJumpControls={false}\n    customAdditionalControls={[]}\n  />\n))\n\nexport default React.memo(Player);\n","import React, { PureComponent } from 'react';\nimport { Jumbotron, Image, ListGroup } from 'react-bootstrap';\nimport Player from '../player';\nimport img from '../../assets/images/default.jpg';\nimport './question-block.scss';\n\nclass QuestionBlock extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.playerRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.handleStopPlayer();\n  }\n\n  handleStopPlayer = () => {\n    const { isRoundGuessed } = this.props;\n    if (!isRoundGuessed) return;\n    this.playerRef.current.audio.current.pause();\n  }\n\n  render() {\n    const { correctAnswerId, groupData, correctAnswerAudio } = this.props;\n    const data = groupData[correctAnswerId];\n    const isCorrectAnswer = Number.isInteger(correctAnswerId);\n    return (\n      <Jumbotron className=\"random-ost\">\n        <Image src={isCorrectAnswer ? data.image : img} rounded />\n        <ListGroup>\n          <ListGroup.Item>\n            <h3>{isCorrectAnswer ? data.filmName : \"******\"}</h3>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <div className=\"audio-player\">\n              <Player\n                ref={this.playerRef}\n                src={correctAnswerAudio} />\n            </div>\n          </ListGroup.Item>\n        </ListGroup>\n      </Jumbotron>\n    );\n  }\n}\n \nexport default QuestionBlock;\n","import React, { PureComponent } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport Player from '../player';\nimport './variants-block.scss';\n\nclass VariantsBlock extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.playerRef = React.createRef();\n  }\n\n  render() {\n    const { ostData, indicatorClasses, src, click } = this.props;\n    return (\n      <>\n        <ListGroup className=\"ost-variants\">\n          {ostData.map(({ filmName }, id) => (\n            <ListGroup.Item\n              key={id}\n              onClick={() => click(id, this.playerRef)}>\n              <span className={indicatorClasses[id]}></span>\n              {filmName}\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n        <Player\n          ref={this.playerRef}\n          hidden={true}\n          autoplay={true}\n          src={src} />\n      </>\n    );\n  }\n}\n\nexport default VariantsBlock;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport Player from '../player';\nimport './details.scss';\n\nconst Details = ({ isAnswerChosen, ostData }) => {\n  return (\n    <Card className=\"details\">\n      { Number.isInteger(isAnswerChosen) ?\n        <>\n          <div className=\"card-body\">\n            <img src={ostData.image} alt={ostData.filmName} />\n            <ul className=\"list-group list-group-flush\">\n              <li className=\"list-group-item\">\n                <h4>{ostData.filmName}</h4>\n              </li>\n              <li className=\"list-group-item\">\n                <span>{ostData.trackName}</span>\n              </li>\n              <li className=\"list-group-item\">\n                <div className=\"audio-player\">\n                  <Player src={ostData.audio} />\n                </div>\n              </li>\n            </ul>\n          </div>\n          <p>{ostData.description}</p>\n        </> :\n        <p className=\"instruction\">\n          <span>Послушайте плеер. Выберите фильм, сериал или игру, соответствующую саундтреку.</span>\n        </p>\n      }\n    </Card>\n  );\n}\n\nexport default React.memo(Details);\n","import React from 'react';\nimport './button.scss';\n\nconst Button = ({ disabled, click, children }) => {\n  return (\n    <button\n      type=\"button\"\n      onClick={click}\n      className={[\"btn\", disabled ? \"\" : \"btn-success\"].join(\" \")}\n      disabled={disabled}>{children}</button>\n  );\n}\n \nexport default React.memo(Button);\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\nimport QuestionBlock from '../../components/question-block';\nimport VariantsBlock from '../../components/variants-block';\nimport Details from '../../components/details';\nimport Button from '../../components/button';\n\nconst GameBlocks = ({\n  ostData,\n  ostGroups,\n  currentGroupId,\n  correctAnswerId,\n  chosenAnswerId,\n  indicatorClasses,\n  isRoundGuessed,\n  sound,\n  handleChooseOst,\n  handleGoNextLevel,\n}) => {\n  const groupName = ostGroups[currentGroupId];\n  const groupData = ostData[groupName];\n  if (!ostData) return;\n  return (\n    <>\n      <QuestionBlock \n        correctAnswerId={isRoundGuessed ? correctAnswerId : null}\n        groupData={groupData}\n        correctAnswerAudio={groupData[correctAnswerId].audio}\n        isRoundGuessed={isRoundGuessed} />\n      <Row>\n        <Col sm={12} md={6}>\n          <VariantsBlock\n            src={sound}\n            ostData={groupData}\n            correctAnswerId={correctAnswerId}\n            indicatorClasses={indicatorClasses}\n            click={handleChooseOst} />\n        </Col>\n        <Col sm={12} md={6}>\n          <Details\n            isAnswerChosen={chosenAnswerId}\n            ostData={groupData[chosenAnswerId]} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Button\n            click={handleGoNextLevel}\n            disabled={!isRoundGuessed}>\n            Следующий уровень\n          </Button>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nexport default React.memo(GameBlocks);\n","import React from 'react';\nimport './confetti.scss';\n\nconst Confetti = () => {\n  const c = new Array(501).fill(1);\n  return (\n    <>\n      {c.map((_, i) => {\n        const cl = `confetti-${i}`;\n        return <div key={i} className={cl}></div>\n      })}\n    </>\n  )\n};\n\nexport default React.memo(Confetti);\n","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\n\nimport Button from '../../components/button';\nimport Confetti from '../../components/confetti';\n\nimport './finish-blocks.scss';\n\nconst FinishBlocks = ({\n  score,\n  maxRoundScore,\n  ostGroups,\n  handleStartNewGame,\n}) => {\n  const roundsCount = ostGroups.length;\n  const maxScore = maxRoundScore * roundsCount;\n  if (score === maxScore) {\n    return (\n      <Jumbotron className=\"finish-blocks\">\n        <h1 className=\"display-3 text-center\">\n          Поздравлем!\n          <span role=\"img\" aria-label=\"\">🎉</span>\n        </h1>\n        <p className=\"lead text-center\">Вы настоящий знаток фильмов!</p>\n        <hr className=\"my-4\" /> \n        <img className=\"img-win\" src=\"https://img1.goodfon.ru/wallpaper/nbig/7/76/game-of-thrones-daenerys-7743.jpg\" alt=\"win\"></img>\n        <Confetti />\n      </Jumbotron>\n    );\n  }\n\n  return (\n    <Jumbotron className=\"finish-blocks\">\n      <h1 className=\"display-3 text-center\">Поздравляем!</h1>\n      <p className=\"lead text-center\">\n        Вы прошли викторину и набрали {score} из {maxScore} возможных баллов\n      </p>\n      <hr className=\"my-4\" /> \n      <Button\n        click={handleStartNewGame}>\n        Попробовать еще раз!\n      </Button> \n    </Jumbotron>\n  );\n}\n\nexport default React.memo(FinishBlocks);\n","import React, { PureComponent } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { getCorrectAnswerId } from './utils';\n\nimport Header from './components/header';\nimport GameBlocks from './containers/game-blocks';\nimport FinishBlocks from './containers/finish-blocks';\n\nimport data from './assets/data/data.json';\nimport correctAudio from './assets/sounds/tada.mp3';\nimport incorrectAudio from './assets/sounds/no.mp3';\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      maxRoundScore: 5,\n      currentGroupId: 0,\n      correctAnswerId: getCorrectAnswerId(),\n      triesCount: 0,\n      ostGroups: Object.keys(data),\n      ostData: data,\n      chosenAnswerId: null,\n      indicatorClasses: new Array(6),\n      isRoundGuessed: false,\n      sound: '',\n      correctAnswers: [],\n      chosenVariants: [],\n    }\n  }\n\n  handleChooseOst = (id, soundRef) => {\n    const { correctAnswerId, indicatorClasses, isRoundGuessed, chosenVariants } = this.state;\n    const isAnswerCorrect = correctAnswerId === id;\n    const updatedClasses = [...indicatorClasses];\n    if (!isRoundGuessed) {\n      updatedClasses[id] = isAnswerCorrect ? 'correct' : 'incorrect';\n    }\n    this.setState((state) => {\n      const updatedState = {\n        ...state,\n        chosenAnswerId: id,\n        indicatorClasses: updatedClasses,\n        chosenVariants: state.chosenVariants.concat(id)\n      }\n      if (chosenVariants.indexOf(id) !== -1 || isRoundGuessed) {\n        return updatedState;\n      }\n\n      const stateDependOnAnswer = isAnswerCorrect ? this.getCorrectAnswerState(state) : this.getIncorrectAnswerState(state);\n      return {\n        ...updatedState,\n        ...stateDependOnAnswer\n      }\n    }, () => {\n      if (!isRoundGuessed) {\n        soundRef.current.audio.current.play();\n      }\n    })\n  }\n\n  getCorrectAnswerState = (state) => {\n    const { maxRoundScore } = this.state;\n    const groupName = state.ostGroups[state.currentGroupId];\n    const groupData = state.ostData[groupName];\n    const { filmName } = groupData[state.correctAnswerId];\n    return {\n      score: state.score + maxRoundScore - state.triesCount,\n      isRoundGuessed: true,\n      triesCount: state.triesCount + 1,\n      sound: correctAudio,\n      correctAnswers: state.correctAnswers.concat(filmName),\n    };\n  }\n\n  getIncorrectAnswerState = (state) => {\n    return {\n      triesCount: state.triesCount + 1,\n      sound: incorrectAudio\n    };\n  }\n\n  handleGoNextLevel = () => {\n    const { currentGroupId, ostGroups } = this.state;\n    if (currentGroupId === ostGroups.length) {\n      return;\n    }\n    const resetedSettings = this.getResetedSettings();\n    this.setState((state) => ({\n      ...state,\n      currentGroupId: state.currentGroupId + 1,\n      ...resetedSettings,\n    }));\n  }\n\n  getResetedSettings = () => ({\n    correctAnswerId: getCorrectAnswerId(),\n    triesCount: 0,\n    chosenAnswerId: null,\n    indicatorClasses: new Array(6),\n    isRoundGuessed: false,\n    sound: '',\n    chosenVariants: [],\n  });\n\n  handleStartNewGame = () => {\n    const resetedSettings = this.getResetedSettings();\n    this.setState((state) => ({\n      ...state,\n      score: 0,\n      currentGroupId: 0,\n      correctAnswers: [],\n      ...resetedSettings,\n    }));\n  }\n\n  renderGameBlocks = () => {\n    const { ostData, ostGroups, currentGroupId, correctAnswerId, chosenAnswerId, indicatorClasses, isRoundGuessed, sound } = this.state;\n    return (\n      <GameBlocks\n        ostData={ostData}\n        ostGroups={ostGroups}\n        currentGroupId={currentGroupId}\n        correctAnswerId={correctAnswerId}\n        chosenAnswerId={chosenAnswerId}\n        indicatorClasses={indicatorClasses}\n        isRoundGuessed={isRoundGuessed}\n        sound={sound}\n        handleChooseOst={this.handleChooseOst}\n        handleGoNextLevel={this.handleGoNextLevel}\n      />\n    )\n  };\n\n  renderFinishGameBlocks = () => {\n    const { score, maxRoundScore, ostGroups, correctAnswers } = this.state;\n    console.log(`Правильные ответы: ${correctAnswers}`);\n    return (\n      <FinishBlocks\n        score={score}\n        maxRoundScore={maxRoundScore}\n        ostGroups={ostGroups}\n        handleStartNewGame={this.handleStartNewGame}\n      />\n    )\n  }\n  \n  render() {\n    const { score, currentGroupId, ostGroups } = this.state;\n    return (\n      <Container>\n        <Header\n          score={score}\n          currentGroupId={currentGroupId} />\n        {currentGroupId === ostGroups.length ?\n          this.renderFinishGameBlocks() :\n          this.renderGameBlocks()}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}